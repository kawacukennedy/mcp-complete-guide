// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: mcp.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToolServiceClient is the client API for ToolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolServiceClient interface {
	Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error)
	StreamInvoke(ctx context.Context, opts ...grpc.CallOption) (ToolService_StreamInvokeClient, error)
}

type toolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToolServiceClient(cc grpc.ClientConnInterface) ToolServiceClient {
	return &toolServiceClient{cc}
}

func (c *toolServiceClient) Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error) {
	out := new(InvokeResponse)
	err := c.cc.Invoke(ctx, "/mcp.ToolService/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) StreamInvoke(ctx context.Context, opts ...grpc.CallOption) (ToolService_StreamInvokeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ToolService_ServiceDesc.Streams[0], "/mcp.ToolService/StreamInvoke", opts...)
	if err != nil {
		return nil, err
	}
	x := &toolServiceStreamInvokeClient{stream}
	return x, nil
}

type ToolService_StreamInvokeClient interface {
	Send(*InvokeRequest) error
	Recv() (*InvokeResponse, error)
	grpc.ClientStream
}

type toolServiceStreamInvokeClient struct {
	grpc.ClientStream
}

func (x *toolServiceStreamInvokeClient) Send(m *InvokeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *toolServiceStreamInvokeClient) Recv() (*InvokeResponse, error) {
	m := new(InvokeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ToolServiceServer is the server API for ToolService service.
// All implementations must embed UnimplementedToolServiceServer
// for forward compatibility
type ToolServiceServer interface {
	Invoke(context.Context, *InvokeRequest) (*InvokeResponse, error)
	StreamInvoke(ToolService_StreamInvokeServer) error
	mustEmbedUnimplementedToolServiceServer()
}

// UnimplementedToolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToolServiceServer struct {
}

func (UnimplementedToolServiceServer) Invoke(context.Context, *InvokeRequest) (*InvokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedToolServiceServer) StreamInvoke(ToolService_StreamInvokeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInvoke not implemented")
}
func (UnimplementedToolServiceServer) mustEmbedUnimplementedToolServiceServer() {}

// UnsafeToolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolServiceServer will
// result in compilation errors.
type UnsafeToolServiceServer interface {
	mustEmbedUnimplementedToolServiceServer()
}

func RegisterToolServiceServer(s grpc.ServiceRegistrar, srv ToolServiceServer) {
	s.RegisterService(&ToolService_ServiceDesc, srv)
}

func _ToolService_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcp.ToolService/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).Invoke(ctx, req.(*InvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_StreamInvoke_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ToolServiceServer).StreamInvoke(&toolServiceStreamInvokeServer{stream})
}

type ToolService_StreamInvokeServer interface {
	Send(*InvokeResponse) error
	Recv() (*InvokeRequest, error)
	grpc.ServerStream
}

type toolServiceStreamInvokeServer struct {
	grpc.ServerStream
}

func (x *toolServiceStreamInvokeServer) Send(m *InvokeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *toolServiceStreamInvokeServer) Recv() (*InvokeRequest, error) {
	m := new(InvokeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ToolService_ServiceDesc is the grpc.ServiceDesc for ToolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.ToolService",
	HandlerType: (*ToolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _ToolService_Invoke_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamInvoke",
			Handler:       _ToolService_StreamInvoke_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mcp.proto",
}